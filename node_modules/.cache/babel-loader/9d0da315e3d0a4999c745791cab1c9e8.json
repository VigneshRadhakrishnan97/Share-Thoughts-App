{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_PROFILE, PROFILE_ERROR } from \"./type\";\nimport setAuthToken from \"../utils/setAuthToken\"; //get current user profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"api/profile/me\");\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(formData);\n\n  try {\n    const res = await axios.post('api/profile', body, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile updated' : 'profile created', 'success'));\n    if (!edit) history.push('/dashboard');\n  } catch (err) {\n    const error = err.response.data.errors;\n\n    if (error) {\n      error.forEach(e => {\n        dispatch(setAlert(e.msg, \"danger\", 3000));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/v.n.radhakrishnan/Social/DevConnection/client/src/action/profile.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","setAuthToken","getCurrentProfile","dispatch","localStorage","token","res","get","type","payload","data","err","console","log","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","body","JSON","stringify","post","push","error","errors","forEach","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,QAA3C;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACzD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,gBAAV,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,aADC;AAEPS,MAAAA,OAAO,EAAE;AACPK,QAAAA,GAAG,EAAEH,GAAG,CAACI,QAAJ,IAAgBJ,GAAG,CAACI,QAAJ,CAAaC,UAD3B;AAEPC,QAAAA,MAAM,EAAEN,GAAG,CAACI,QAAJ,IAAgBJ,GAAG,CAACI,QAAJ,CAAaE;AAF9B;AAFF,KAAD,CAAR;AAOD;AACF,CApBM,C,CAsBP;;AAEA,OAAO,MAAMC,aAAa,GAAC,CAACC,QAAD,EAAUC,OAAV,EAAkBC,IAAI,GAAC,KAAvB,KAAgC,MAAOlB,QAAP,IAAkB;AAE3E,QAAMmB,MAAM,GAAC;AACXC,IAAAA,OAAO,EAAC;AACN,sBAAe;AADT;AADG,GAAb;AAKA,QAAMC,IAAI,GAACC,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAX;;AACA,MAAI;AACF,UAAMb,GAAG,GAAC,MAAMT,KAAK,CAAC8B,IAAN,CAAW,aAAX,EAAyBH,IAAzB,EAA8BF,MAA9B,CAAhB;AACDnB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACL,QAAQ,CAACuB,IAAI,GAAC,iBAAD,GAAmB,iBAAxB,EAA0C,SAA1C,CAAT,CAAR;AACA,QAAG,CAACA,IAAJ,EACAD,OAAO,CAACQ,IAAR,CAAa,YAAb;AAEA,GAVD,CAUE,OAAOjB,GAAP,EAAY;AACZ,UAAMkB,KAAK,GAAGlB,GAAG,CAACI,QAAJ,CAAaL,IAAb,CAAkBoB,MAAhC;;AAEA,QAAID,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACE,OAAN,CAAeC,CAAD,IAAO;AACnB7B,QAAAA,QAAQ,CAACL,QAAQ,CAACkC,CAAC,CAAClB,GAAH,EAAQ,QAAR,EAAkB,IAAlB,CAAT,CAAR;AACD,OAFD;AAGD;;AACAX,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,aADC;AAEPS,MAAAA,OAAO,EAAE;AACPK,QAAAA,GAAG,EAAEH,GAAG,CAACI,QAAJ,IAAgBJ,GAAG,CAACI,QAAJ,CAAaC,UAD3B;AAEPC,QAAAA,MAAM,EAAEN,GAAG,CAACI,QAAJ,IAAgBJ,GAAG,CAACI,QAAJ,CAAaE;AAF9B;AAFF,KAAD,CAAR;AAOF;AAEA,CAnCI","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport { GET_PROFILE, PROFILE_ERROR } from \"./type\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n//get current user profile\r\n\r\nexport const getCurrentProfile = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"api/profile/me\");\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//create or update profile\r\n\r\nexport const createProfile=(formData,history,edit=false)=> async (dispatch)=>{\r\n\r\n  const config={\r\n    headers:{\r\n      'Content-Type':'application/json'\r\n    }\r\n  }\r\n  const body=JSON.stringify(formData);\r\n  try {\r\n    const res=await axios.post('api/profile',body,config);\r\n   dispatch({\r\n     type: GET_PROFILE,\r\n     payload: res.data,\r\n   });\r\n   dispatch(setAlert(edit?'Profile updated':'profile created','success'));\r\n   if(!edit)\r\n   history.push('/dashboard');\r\n    \r\n  } catch (err) {\r\n    const error = err.response.data.errors;\r\n\r\n    if (error) {\r\n      error.forEach((e) => {\r\n        dispatch(setAlert(e.msg, \"danger\", 3000));\r\n      });\r\n    }\r\n     dispatch({\r\n       type: PROFILE_ERROR,\r\n       payload: {\r\n         msg: err.response && err.response.statusText,\r\n         status: err.response && err.response.status,\r\n       },\r\n     });\r\n  }\r\n     \r\n  }\r\n"]},"metadata":{},"sourceType":"module"}