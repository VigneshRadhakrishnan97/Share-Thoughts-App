{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"./type\"; //Get post\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //Add likes\n\nexport const addLike = postID => async dispatch => {\n  try {\n    const res = await axios.put(`api/posts/like/${postID}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postID,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //Remove likes\n\nexport const removeLike = postID => async dispatch => {\n  try {\n    const res = await axios.put(`api/posts/unlike/${postID}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postID,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //Delete post\n\nexport const deletePost = postID => async dispatch => {\n  try {\n    const res = await axios.delete(`api/posts/${postID}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: {\n        postID\n      }\n    });\n    dispatch(setAlert('POST removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //ADD post\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(formData);\n\n  try {\n    const res = await axios.post('api/posts', body, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('POST Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //ADD comment\n\nexport const addComment = (postID, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(formData);\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postID}`, body, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n}; //Delete comment\n\nexport const deleteComment = (postID, commentID) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postID}/${commentID}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentID\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response && err.response.statusText,\n        status: err.response && err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/v.n.radhakrishnan/Social/DevConnection/client/src/action/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postID","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","body","JSON","stringify","post","getPost","id","addComment","deleteComment","commentID"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  GET_POSTS,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  GET_POST,\r\n  ADD_COMMENT,REMOVE_COMMENT\r\n} from \"./type\";\r\n\r\n//Get post\r\nexport const getPosts = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"api/posts\");\r\n    dispatch({\r\n      type: GET_POSTS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//Add likes\r\nexport const addLike = (postID) => async (dispatch) => {\r\n    \r\n  try {\r\n    const res = await axios.put(`api/posts/like/${postID}`);\r\n   \r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postID, likes: res.data },\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//Remove likes\r\nexport const removeLike = (postID) => async (dispatch) => {\r\n      \r\n  try {\r\n    const res = await axios.put(`api/posts/unlike/${postID}`);\r\n    \r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postID, likes: res.data },\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//Delete post\r\nexport const deletePost = (postID) => async (dispatch) => {\r\n     \r\n  try {\r\n    const res = await axios.delete(`api/posts/${postID}`);\r\n    \r\n    dispatch({\r\n      type: DELETE_POST,\r\n      payload: { postID },\r\n    });\r\n    dispatch(setAlert('POST removed','success'))\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//ADD post\r\nexport const addPost = (formData) => async (dispatch) => {\r\n     const config={\r\n         headers:{\r\n             'Content-Type':'application/json'\r\n         }\r\n     }\r\n     const body =JSON.stringify(formData);\r\n  try {\r\n    const res = await axios.post('api/posts', body, config);\r\n    \r\n    dispatch({\r\n      type: ADD_POST,\r\n      payload: res.data,\r\n    });\r\n    dispatch(setAlert('POST Created','success'))\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//Get post\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/posts/${id}`);\r\n    dispatch({\r\n      type: GET_POST,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//ADD comment\r\nexport const addComment = (postID,formData) => async (dispatch) => {\r\n     const config={\r\n         headers:{\r\n             'Content-Type':'application/json'\r\n         }\r\n     }\r\n     const body =JSON.stringify(formData);\r\n  try {\r\n    const res = await axios.post(`/api/posts/comment/${postID}`, body, config);\r\n    \r\n    dispatch({\r\n      type: ADD_COMMENT,\r\n      payload: res.data,\r\n    });\r\n    dispatch(setAlert('Comment Added','success'))\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n//Delete comment\r\nexport const deleteComment = (postID,commentID) => async (dispatch) => {\r\n     \r\n  try {\r\n    const res = await axios.delete(\r\n      `/api/posts/comment/${postID}/${commentID}`\r\n    );\r\n    \r\n    dispatch({\r\n      type: REMOVE_COMMENT,\r\n      payload: commentID,\r\n    });\r\n    dispatch(setAlert('Comment Removed','success'))\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: {\r\n        msg: err.response && err.response.statusText,\r\n        status: err.response && err.response.status,\r\n      },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}