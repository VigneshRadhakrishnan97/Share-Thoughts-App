{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../action/type\";\nconst initialstate = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: null\n};\nexport default function post(state = initialstate, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => {\n          return post._id !== payload.postID;\n        }),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => {\n          return post._id === payload.postID ? { ...post,\n            likes: payload.likes\n          } : post;\n        }),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/v.n.radhakrishnan/Social/DevConnection/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialstate","posts","post","loading","error","state","action","type","payload","filter","_id","postID","map","likes","comments","comment"],"mappings":"AAAA,SACEA,SADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,QANF,EAMWC,WANX,EAMuBC,cANvB,QAOO,gBAPP;AASA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfC,EAAAA,IAAI,EAAC,IAFU;AAGfC,EAAAA,OAAO,EAAC,IAHO;AAIfC,EAAAA,KAAK,EAAC;AAJS,CAAnB;AAOA,eAAe,SAASF,IAAT,CAAeG,KAAK,GAACL,YAArB,EAAkCM,MAAlC,EAAyC;AACpD,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAiBF,MAAvB;;AAEA,UAAQC,IAAR;AACE,SAAKf,SAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,KAAK,EAAEO,OAFF;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKN,QAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,IAAI,EAAEM,OAFD;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,QAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFF;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAoBP,IAAD,IAAU;AAClC,iBAAOA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACG,MAA5B;AACD,SAFM,CAFF;AAKLR,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKV,UAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELD,QAAAA,KAAK,EAAEI,OAFF;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKT,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYW,GAAZ,CAAiBV,IAAD,IAAU;AAC/B,iBAAOA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACG,MAArB,GACH,EAAE,GAAGT,IAAL;AAAWW,YAAAA,KAAK,EAAEL,OAAO,CAACK;AAA1B,WADG,GAEHX,IAFJ;AAGD,SAJM,CAFF;AAOLC,QAAAA,OAAO,EAAE;AAPJ,OAAP;;AASF,SAAKL,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiBY,UAAAA,QAAQ,EAAEN;AAA3B,SAFD;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKJ,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiBY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA4BM,OAAD,IAAYA,OAAO,CAACL,GAAR,KAAeF,OAAtD;AAA3B,SAFD;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF;AACE,aAAOE,KAAP;AAxDJ;AA2DH","sourcesContent":["import {\r\n  GET_POSTS,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  GET_POST,ADD_COMMENT,REMOVE_COMMENT\r\n} from \"../action/type\";\r\n\r\nconst initialstate={\r\n    posts:[],\r\n    post:null,\r\n    loading:true,\r\n    error:null\r\n}\r\n\r\nexport default function post (state=initialstate,action){\r\n    const {type,payload} = action;\r\n\r\n    switch (type) {\r\n      case GET_POSTS:\r\n        return {\r\n          ...state,\r\n          posts: payload,\r\n          loading: false,\r\n        };\r\n      case GET_POST:\r\n        return {\r\n          ...state,\r\n          post: payload,\r\n          loading: false,\r\n        };\r\n      case ADD_POST:\r\n        return {\r\n          ...state,\r\n          posts: [payload, ...state.posts],\r\n          loading: false,\r\n        };\r\n      case DELETE_POST:\r\n        return {\r\n          ...state,\r\n          posts: state.posts.filter((post) => {\r\n            return post._id !== payload.postID;\r\n          }),\r\n          loading: false,\r\n        };\r\n      case POST_ERROR:\r\n        return {\r\n          ...state,\r\n          error: payload,\r\n          loading: false,\r\n        };\r\n      case UPDATE_LIKES:\r\n        return {\r\n          ...state,\r\n          posts: state.posts.map((post) => {\r\n            return post._id === payload.postID\r\n              ? { ...post, likes: payload.likes }\r\n              : post;\r\n          }),\r\n          loading: false,\r\n        };\r\n      case ADD_COMMENT:\r\n        return {\r\n          ...state,\r\n          post: { ...state.post, comments: payload },\r\n          loading: false,\r\n        };\r\n      case REMOVE_COMMENT:\r\n        return {\r\n          ...state,\r\n          post: { ...state.post, comments: state.post.comments.filter((comment)=>(comment._id!== payload)) },\r\n          loading: false,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}